# features (1 sim, 0 não)
# pelo longo?
# perna curta?
# faz auau?
porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

# features (1 sim, 0 não)
# pelo longo?
# perna curta?
# faz auau?
porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

cachorro1 = [0, 1, 1]
cachorro2 = [1, 0, 1]
cachorro3 = [1, 1, 1]

# 1 => porco, 0 => cachorro
dados = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
classes = [1,1,1,0,0,0]

from sklearn.svm import LinearSVC

from sklearn.svm import LinearSVC
model = LinearSVC()
model.fit(dados, classes)

usr/local/lib/python3.10/dist-packages/sklearn/svm/_classes.py:32: FutureWarning: The default value of `dual` will change from `True` to `'auto'` in 1.5. Set the value of `dual` explicitly to suppress the warning.
  warnings.warn(

LinearSVC
LinearSVC()

animal_misterioso = [1,1,1]
model.predict([animal_misterioso])
array([0])

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]
testes = [misterio1, misterio2, misterio3]
model.predict(testes)
array([0, 1, 0])

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]
testes = [misterio1, misterio2, misterio3]
previsoes = model.predict(testes)
testes_classes = [0, 1, 1]

previsoes == testes_classes
array([ True,  True, False])

corretos = (previsoes == testes_classes).sum()

corretos = (previsoes == testes_classes).sum()
total = len(testes)
taxa_de_acerto = corretos/total
print("Taxa de acerto ", taxa_de_acerto)
Taxa de acerto  0.6666666666666666

corretos = (previsoes == testes_classes).sum()
total = len(testes)
taxa_de_acerto = corretos/total
print("Taxa de acerto ", taxa_de_acerto *100)
Taxa de acerto  66.66666666666666

from sklearn.metrics import accuracy_score

from sklearn.metrics import accuracy_score
taxa_de_acerto = accuracy_score(testes_classes, previsoes)
print("Taxa de acerto", taxa_de_acerto * 100)
Taxa de acerto 66.66666666666666

corretos = (previsoes == teste_y).sum()
total = len(teste_x)
taxa_de_acerto = corretos/total 
print("Taxa de acerto %.2f " % (taxa_de_acerto * 100))

taxa_de_acerto = accuracy_score(teste_y, previsoes)
print("Taxa de acerto %.2f " % (taxa_de_acerto * 100))
Taxa de acerto 66.67%
